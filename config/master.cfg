# -*- python -*-
# ex: set syntax=python:

# TODO: Would be nice to run "make test" -- probably as a separate task

#######
####### ScummVM settings for buildbot
#######

import os, sys, copy
sys.path.append("/opt/buildbot/master")
import scumm
import scummsecret

scumm_giturl = "git://github.com/scummvm/scummvm.git"

scumm_branch_master = "master"
scumm_branch_master_desc = "master"

scumm_branch_stable = "branch-1-3-0"
scumm_branch_stable_desc = "stable"

scumm_package_dst_master = "/var/www/snapshots/master"
scumm_package_dst_stable = "/var/www/snapshots/stable"

# toggle nightly builds
scumm_build_nightly_master = False
scumm_build_nightly_stable = True

# Files to package for stable snapshots (common to all ports).
scumm_package_stable = [
	"AUTHORS",
	"COPYING",
	"COPYING.LGPL",
	"COPYING.BSD",
	"COPYRIGHT",
	"NEWS",
	"README",
	"gui/themes/translations.dat",
	"gui/themes/scummclassic.zip",
	"gui/themes/scummmodern.zip",
	"dists/engine-data/drascula.dat",
	"dists/engine-data/hugo.dat",
	"dists/engine-data/kyra.dat",
	"dists/engine-data/lure.dat",
	"dists/engine-data/m4.dat",
	"dists/engine-data/queen.tbl",
	"dists/engine-data/sky.cpt",
	"dists/engine-data/teenagent.dat",
	"dists/engine-data/toon.dat",
	"dists/pred.dic"
]

# Files to package for master snapshots (common to all ports).
scumm_package_master = copy.deepcopy(scumm_package_stable)
#scumm_package_master.extend( [
#] )

DEFAULT_PATH = "/usr/bin:/bin"
#DEFAULT_PATH = os.environ["PATH"]

scumm_env = {
	"LC_ALL": "C",
	"CXX": "",
	"CXXFLAGS": "",
	"CPPFLAGS": "",
	"LDFLAGS": "",
	"CCACHE_COMPRESS": "1",
	"PATH": DEFAULT_PATH
}

# Our platform definitions.

scumm_platforms_master = {}
scumm_platforms_stable = {}

# debian lenny 32bit.
scumm_env_lenny = copy.deepcopy(scumm_env)
scumm_env_lenny["PATH"] = "/usr/bin:%s" % DEFAULT_PATH
scumm_env_lenny["CXX"] = "ccache g++"

p = {
	"configureargs": [ ],
	"env": scumm_env_lenny,
	"package": [ "scummvm" ]
}

scumm_platforms_master["lenny"] = p
scumm_platforms_stable["lenny"] = p

# debian lenny 64bit.
scumm_root_lenny_x86_64 = "/opt/toolchains/debian-lenny-x86_64"
scumm_env_lenny_x86_64 = copy.deepcopy(scumm_env)
scumm_env_lenny_x86_64["PATH"] = "%s/usr/bin:%s" % (scumm_root_lenny_x86_64, DEFAULT_PATH)
scumm_env_lenny_x86_64["CXX"] = "ccache g++"
scumm_env_lenny_x86_64["CXXFLAGS"] = "-m64 -isystem %s/usr/include" % scumm_root_lenny_x86_64
scumm_env_lenny_x86_64["LDFLAGS"] = "-m64 -Wl,-rpath,%s/lib -Wl,-rpath,%s/usr/lib -L%s/usr/lib" % \
									(scumm_root_lenny_x86_64, scumm_root_lenny_x86_64, scumm_root_lenny_x86_64)

p = {
	"configureargs": [
		"--host=x86_64-unknown-linux-gnu",
	],
	"env": scumm_env_lenny_x86_64,
	"package": [ "scummvm" ]
}

scumm_platforms_master["lenny-x86_64"] = p
scumm_platforms_stable["lenny-x86_64"] = p

# mingw 32bit, using the mingw compiler from the debian repositories.
scumm_root_mingw_w32 = "/opt/toolchains/i586-mingw32msvc"
scumm_env_mingw_w32 = copy.deepcopy(scumm_env)
scumm_env_mingw_w32["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w32, DEFAULT_PATH)
scumm_env_mingw_w32["CXX"] = "ccache i586-mingw32msvc-g++"
scumm_env_mingw_w32["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w32
scumm_env_mingw_w32["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w32

p = {
	"configureargs": [
		"--host=i586-mingw32msvc",
	],
	"env": scumm_env_mingw_w32,
	"package": [
		"scummvm.exe",
		"%s/bin/SDL.dll" % scumm_root_mingw_w32
	]
}

scumm_platforms_master["mingw-w32"] = p
scumm_platforms_stable["mingw-w32"] = p

# mingw 64bit, using an experimental snapshot of mingw-w64.
scumm_root_mingw_w64 = "/opt/toolchains/mingw-w64-bin_i686-linux"
scumm_env_mingw_w64 = copy.deepcopy(scumm_env)
scumm_env_mingw_w64["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w64, DEFAULT_PATH)
scumm_env_mingw_w64["CXX"] = "ccache x86_64-pc-mingw32-g++"
scumm_env_mingw_w64["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w64
scumm_env_mingw_w64["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w64

p = {
	"configureargs": [
		"--host=x86_64-pc-mingw32",
	],
	"env": scumm_env_mingw_w64,
	"package": [
		"scummvm.exe",
		"%s/bin/SDL.dll" % scumm_root_mingw_w64,
		"%s/bin/libgcc_s_sjlj-1.dll" % scumm_root_mingw_w64
	]
}

scumm_platforms_master["mingw-w64"] = p
scumm_platforms_stable["mingw-w64"] = p

# wii
scumm_root_wii = "/opt/toolchains/devkitPPC-r16"
scumm_env_wii = copy.deepcopy(scumm_env)
scumm_env_wii["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_wii, DEFAULT_PATH)
scumm_env_wii["CXX"] = "ccache powerpc-gekko-g++"
scumm_env_wii["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_wii
scumm_env_wii["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_wii
scumm_env_wii["DEVKITPRO"] = "%s" % scumm_root_wii
scumm_env_wii["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_wii

p = {
	"configureargs": [
		"--host=wii",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-png",	# sword25 plugin isn't usable atm
		"--enable-vkeybd",
	],
	"env": scumm_env_wii,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ]
}

scumm_platforms_master["wii"] = p
scumm_platforms_stable["wii"] = p

# gamecube
scumm_root_gc = "/opt/toolchains/devkitPPC-r16"
scumm_env_gc = copy.deepcopy(scumm_env)
scumm_env_gc["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_gc, DEFAULT_PATH)
scumm_env_gc["CXX"] = "ccache powerpc-gekko-g++"
scumm_env_gc["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_gc
scumm_env_gc["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_gc
scumm_env_gc["DEVKITPRO"] = "%s" % scumm_root_gc
scumm_env_gc["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_gc

p = {
	"configureargs": [
		"--host=gamecube",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-png",	# sword25 plugin isn't usable atm
		"--enable-vkeybd",
	],
	"env": scumm_env_gc,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ]
}

scumm_platforms_master["gamecube"] = p
scumm_platforms_stable["gamecube"] = p

# Nintendo DS
scumm_root_ds = "/opt/toolchains/devkitARM-r30"
scumm_env_ds = copy.deepcopy(scumm_env)
scumm_env_ds["PATH"] = "%s/devkitARM/bin:%s" % (scumm_root_ds, DEFAULT_PATH)
scumm_env_ds["CXX"] = "ccache arm-eabi-c++"
#scumm_env_ds["CXXFLAGS"] = "-isystem %s/include" % scumm_root_ds
#scumm_env_ds["LDFLAGS"] = "-L%s/lib" % scumm_root_ds
scumm_env_ds["DEVKITPRO"] = scumm_root_ds
scumm_env_ds["DEVKITARM"] = "%s/devkitARM" % scumm_root_ds

p = {
	"configureargs": [
		"--host=ds",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-png",	# sword25 plugin isn't usable atm
	],
	"env": scumm_env_ds,
	#"strip": "%s/bin/arm-eabi-strip scummvm.elf" % scumm_root_ds,
	"package": [
		"scummvm.nds",
		"scummvm.ds.gba",
		"plugins"
	]
}

scumm_platforms_master["ds"] = p
scumm_platforms_stable["ds"] = p

# Mac OS X Intel
scumm_root_osx_intel = "/opt/toolchains/i686-apple-darwin9-10.4"
scumm_env_osx_intel = copy.deepcopy(scumm_env)
scumm_env_osx_intel["PATH"] = "%s/bin:%s" % (scumm_root_osx_intel, DEFAULT_PATH)
scumm_env_osx_intel["CXX"] = "ccache i686-apple-darwin9-g++"
scumm_env_osx_intel["CXXFLAGS"] = "-isystem %s/include" % scumm_root_osx_intel
scumm_env_osx_intel["LDFLAGS"] = "-L%s/lib" % scumm_root_osx_intel

p = {
	"configureargs": [
		"--host=i686-apple-darwin9",
		"--disable-nasm",
		"--with-staticlib-prefix=%s" % scumm_root_osx_intel,
	],
	"env": scumm_env_osx_intel,
	"disttarget": "bundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_master["osx_intel"] = p
scumm_platforms_stable["osx_intel"] = p

# Mac OS X PPC
scumm_root_osx_ppc = "/opt/toolchains/powerpc-apple-darwin8-10.2"
scumm_env_osx_ppc = copy.deepcopy(scumm_env)
scumm_env_osx_ppc["PATH"] = "%s/bin:%s" % (scumm_root_osx_ppc, DEFAULT_PATH)
scumm_env_osx_ppc["CXX"] = "ccache ppc-apple-darwin8-g++"
scumm_env_osx_ppc["CXXFLAGS"] = "-fabi-version=1 -fno-use-cxa-atexit -isystem %s/include" % scumm_root_osx_ppc
scumm_env_osx_ppc["LDFLAGS"] = "-L%s/lib -static-libgcc -ldl" % scumm_root_osx_ppc
scumm_env_osx_ppc["MACOSX_DEPLOYMENT_TARGET"] = "10.2"

p = {
	"configureargs": [
		"--host=ppc-apple-darwin8",
		"--with-staticlib-prefix=%s" % scumm_root_osx_ppc,
	],
	"env": scumm_env_osx_ppc,
	"disttarget": "bundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_master["osx_ppc"] = p
scumm_platforms_stable["osx_ppc"] = p

# iPhone
scumm_root_iphone = "/opt/toolchains/arm-apple-darwin9-llvm-gcc-4.2"
scumm_libdir_iphone = "%s/SDK/usr/local" % scumm_root_iphone
scumm_env_iphone = copy.deepcopy(scumm_env)
scumm_env_iphone["PATH"] = "%s/bin:%s" % (scumm_root_iphone, DEFAULT_PATH)
scumm_env_iphone["CXX"] = "ccache arm-apple-darwin9-g++"
scumm_env_iphone["CXXFLAGS"] = "-isystem %s/include" % scumm_libdir_iphone
scumm_env_iphone["LDFLAGS"] = "-F%s/SDK/System/Library/PrivateFrameworks -bind_at_load -L%s/lib" % (scumm_root_iphone, scumm_libdir_iphone)
scumm_env_iphone["LIBDIR"] = scumm_libdir_iphone
scumm_env_iphone["CODESIGN_ALLOCATE"] = "/opt/toolchains/arm-apple-darwin9-llvm-gcc-4.2/bin/arm-apple-darwin9-codesign_allocate"

p = {
	"configureargs": [
		"--host=iphone",
		"--with-staticlib-prefix=%s" % scumm_libdir_iphone,
	],
	"env": scumm_env_iphone,
	"disttarget": "iphonebundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_master["iphone"] = p
scumm_platforms_stable["iphone"] = p

# PSP
scumm_root_psp = "/opt/toolchains/psp"
scumm_env_psp = copy.deepcopy(scumm_env)
scumm_env_psp["PATH"] = "%s/bin:%s" % (scumm_root_psp, DEFAULT_PATH)
scumm_env_psp["CXX"] = "ccache psp-g++"
scumm_env_psp["CXXFLAGS"] = "-isystem %s/include" % scumm_root_psp
scumm_env_psp["LDFLAGS"] = "-L%s/lib" % scumm_root_psp
scumm_env_psp["PSPDEV"] = scumm_root_psp

p = {
	"configureargs": [
		"--host=psp",
		"--disable-debug",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_psp,
	"package": [
		"EBOOT.PBP",
		"plugins"
	]
}

p_master = copy.deepcopy(p)  # copy for master

p["package"].extend( [
	"../../src-stable/src/backends/platform/psp/kbd.zip"
] )
p_master["package"].extend( [
	"../../src-master/src/backends/platform/psp/kbd.zip"
] )

scumm_platforms_master["psp"] = p_master
scumm_platforms_stable["psp"] = p

# PS2
scumm_root_ps2 = "/opt/toolchains/ps2"
scumm_env_ps2 = copy.deepcopy(scumm_env)
scumm_env_ps2["PATH"] = "%s/tools/bin:%s/tools/ee/bin:%s/tools/iop/bin:%s/tools/dvp/bin:%s/sdk/bin:%s" % \
						(scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, DEFAULT_PATH)
scumm_env_ps2["CXX"] = "ccache ee-g++"
#scumm_env_ps2["CXXFLAGS"] = "-isystem %s/include" % scumm_root_ps2
#scumm_env_ps2["LDFLAGS"] = "-L%s/lib" % scumm_root_ps2
scumm_env_ps2["PS2DEV"] = "%s/tools" % scumm_root_ps2
scumm_env_ps2["PS2SDK"] = "%s/sdk" % scumm_root_ps2

p = {
	"configureargs": [
		"--host=ps2",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-png",	# sword25 plugin isn't usable atm
	],
	"env": scumm_env_ps2,
	"strip": "%s/tools/ee/bin/ee-strip --strip-debug scummvm.elf" % scumm_root_ps2,
	"package": [
		"scummvm.elf",
		"plugins"
	]	# TODO/FIXME: What to package?
}

scumm_platforms_master["ps2"] = p
scumm_platforms_stable["ps2"] = p

# GP2X
scumm_root_gp2x = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2x = copy.deepcopy(scumm_env)
scumm_env_gp2x["PATH"] = "%s/bin:%s" % (scumm_root_gp2x, DEFAULT_PATH)
scumm_env_gp2x["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2x["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2x
scumm_env_gp2x["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2x

p = {
	"configureargs": [
		"--host=gp2x",
		"--enable-vkeybd"
	],
	"env": scumm_env_gp2x,
	"disttarget": "gp2x-bundle",
	"package": [ "release/scummvm-gp2x.tar.bz2" ]
}

scumm_platforms_master["gp2x"] = p
scumm_platforms_stable["gp2x"] = p

# GP2X Wiz
scumm_root_gp2xwiz = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2xwiz = copy.deepcopy(scumm_env)
scumm_env_gp2xwiz["PATH"] = "%s/bin:%s" % (scumm_root_gp2xwiz, DEFAULT_PATH)
scumm_env_gp2xwiz["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2xwiz["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2xwiz
scumm_env_gp2xwiz["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2xwiz

p = {
	"configureargs": [
		"--host=gp2xwiz",
		"--enable-vkeybd",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_gp2xwiz,
	"disttarget": "gp2xwiz-bundle",
	"package": [ "release/scummvm-gp2xwiz.tar.bz2" ]
}

scumm_platforms_master["gp2xwiz"] = p
scumm_platforms_stable["gp2xwiz"] = p

# DC
scumm_root_dc= "/opt/toolchains/dc"
scumm_env_dc = copy.deepcopy(scumm_env)
scumm_env_dc["PATH"] = "%s/bin:%s" % (scumm_root_dc, DEFAULT_PATH)
scumm_env_dc["CXX"] = "ccache sh-elf-g++"
scumm_env_dc["CXXFLAGS"] = "-isystem %s/include" % scumm_root_dc
scumm_env_dc["LDFLAGS"] = "-L%s/lib" % scumm_root_dc
scumm_env_dc["IP_TEMPLATE_FILE"] = "/opt/extras-dc/IP.TMPL"
scumm_env_dc["DC_IMAGE_EXTRA_DIR"] = "/opt/extras-dc/demos"

p = {
	"configureargs": [
		"--host=dreamcast",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_dc,
	"disttarget": "dcdist",
	"package": [ "dcdist/scummvm" ]
}

scumm_platforms_master["dc"] = p
scumm_platforms_stable["dc"] = p

# windows ce
scumm_root_wince = "/opt/toolchains/mingw32ce-0.5.1"
scumm_env_wince = copy.deepcopy(scumm_env)
scumm_env_wince["PATH"] = "%s/bin:%s" % (scumm_root_wince, DEFAULT_PATH)
scumm_env_wince["CXX"] = "ccache arm-wince-mingw32ce-g++"
scumm_env_wince["CXXFLAGS"] = "-isystem %s/include -I%s/include/SDL" % (scumm_root_wince, scumm_root_wince)
scumm_env_wince["LDFLAGS"] = "-L%s/lib" % scumm_root_wince

p = {
	"configureargs": [
		"--host=wince"
	],
	"env": scumm_env_wince,
	"strip": "%s/bin/arm-wince-mingw32ce-strip scummvm.exe" % scumm_root_wince,
	"package": [ "scummvm.exe" ]
}

scumm_platforms_master["wince"] = p
scumm_platforms_stable["wince"] = p

# motoezx
scumm_root_motoezx = "/opt/toolchains/motoezx"
scumm_env_motoezx = copy.deepcopy(scumm_env)
scumm_env_motoezx["PATH"] = "%s/bin:%s/crosstool/bin:%s" % (scumm_root_motoezx, scumm_root_motoezx, DEFAULT_PATH)
scumm_env_motoezx["CXX"] = "ccache arm-linux-gnu-g++"
scumm_env_motoezx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motoezx)
scumm_env_motoezx["LDFLAGS"] = "-L%s/lib" % scumm_root_motoezx

p = {
	"configureargs": [
		"--host=motoezx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motoezx,
	"disttarget": "motoezx",
	"package": [ "release/ScummVM-motoezx.pkg" ]
}

scumm_platforms_master["motoezx"] = p
scumm_platforms_stable["motoezx"] = p

# motomagx
scumm_root_motomagx = "/opt/toolchains/motomagx/arm-eabi2"
scumm_env_motomagx = copy.deepcopy(scumm_env)
scumm_env_motomagx["PATH"] = "%s/bin:%s" % (scumm_root_motomagx, DEFAULT_PATH)
scumm_env_motomagx["CXX"] = "ccache arm-linux-gnueabi-g++"
scumm_env_motomagx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motomagx)
scumm_env_motomagx["LDFLAGS"] = "-L%s/lib" % scumm_root_motomagx

p = {
	"configureargs": [
		"--host=motomagx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motomagx,
	"disttarget": "motomagx-mpkg",
	"package": [ "release/ScummVM-motomagx.mpkg" ]
}

scumm_platforms_master["motomagx"] = p
scumm_platforms_stable["motomagx"] = p

# n64
scumm_root_n64 = "/opt/toolchains/mips64-n64"
scumm_env_n64 = copy.deepcopy(scumm_env)
scumm_env_n64["PATH"] = "%s/bin:%s" % (scumm_root_n64, DEFAULT_PATH)
scumm_env_n64["CXX"] = "ccache mips64-g++"
scumm_env_n64["N64SDK"] = "/opt/toolchains/mips64-n64"

p = {
	"configureargs": [
		"--host=n64",
		"--disable-all-engines",
		"--enable-scumm",
		"--enable-gob",
		"--enable-vkeybd"
	],
	"env": scumm_env_n64,
	"strip": "%s/bin/mips64-strip scummvm.elf" % scumm_root_n64,
	"package": [ "scummvm.elf" ]
}

scumm_platforms_master["n64"] = p
scumm_platforms_stable["n64"] = p

# dingux
scumm_root_dingux = "/opt/toolchains/dingux-mipsel"
scumm_env_dingux = copy.deepcopy(scumm_env)
scumm_env_dingux["PATH"] = "%s/usr/bin:%s" % (scumm_root_dingux, DEFAULT_PATH)
scumm_env_dingux["CXX"] = "ccache mipsel-linux-g++"

p = {
	"configureargs": [
		"--host=dingux",
		"--enable-plugins",
		"--default-dynamic",
		"--enable-vkeybd"
	],
	"env": scumm_env_dingux,
	"package": [
		"scummvm",
		"plugins"
	]
}

scumm_platforms_master["dingux"] = p
scumm_platforms_stable["dingux"] = p

# OpenPandora

# Disabled at the moment as the build server has an ancient GLIBC on it ;).

#scumm_root_op = "/opt/toolchains/arm-angstrom-openpandora"
#scumm_env_op = copy.deepcopy(scumm_env)
#scumm_env_op["PATH"] = "%s/bin:%s" % (scumm_root_op, DEFAULT_PATH)
#scumm_env_op["CXX"] = "ccache arm-angstrom-linux-gnueabi-g++"
#
#p = {
#	"configureargs": [
#		"--host=openpandora",
#		"--enable-plugins",
#		"--default-dynamic"
#	],
#	"env": scumm_env_op,
#	"disttarget": "op-bundle",
#	"package": [ "release/scummvm-op-pnd.tar.bz2" ]
#}

#scumm_platforms_master["op"] = p
#scumm_platforms_stable["op"] = p

# GPH Caanoo
# SDK_PATH and TARGET_SYS are exported as they are used in the platforms SDL_CONFIG.

scumm_root_caanoo = "/opt/toolchains/arm-caanoo"
scumm_env_caanoo = copy.deepcopy(scumm_env)
scumm_env_caanoo["SDK_PATH"] = "%s" % scumm_root_caanoo
scumm_env_caanoo["TARGET_SYS"] = "arm-none-linux-gnueabi"
scumm_env_caanoo["PATH"] = "%s/bin:%s" % (scumm_root_caanoo, DEFAULT_PATH)
scumm_env_caanoo["CXX"] = "ccache arm-none-linux-gnueabi-g++"
scumm_env_caanoo["CXXFLAGS"] = "-isystem %s/arm-none-linux-gnueabi/usr/include" % scumm_root_caanoo
scumm_env_caanoo["LDFLAGS"] = "-L%s/arm-none-linux-gnueabi/usr/lib" % scumm_root_caanoo

p = {
	"configureargs": [
		"--host=caanoo",
		"--enable-vkeybd",
		"--enable-plugins",
		"--default-dynamic",
		"--with-sdl-prefix=/opt/toolchains/arm-caanoo/arm-none-linux-gnueabi/usr/bin"
	],
	"env": scumm_env_caanoo,
	"disttarget": "caanoo-bundle",
	"package": [ "release/scummvm-caanoo.tar.bz2" ]
}

scumm_platforms_master["caanoo"] = p
scumm_platforms_stable["caanoo"] = p

# Android
scumm_root_android = "/opt/toolchains/android"
scumm_env_android = copy.deepcopy(scumm_env)
scumm_env_android["PATH"] = "%s/android-ndk-r5b/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin:%s" % (scumm_root_android, DEFAULT_PATH)
scumm_env_android["CXX"] = "ccache arm-linux-androideabi-g++"
scumm_env_android["CXXFLAGS"] = "-isystem %s/3rd-android-4-armeabi-release/include" % scumm_root_android
scumm_env_android["LDFLAGS"] = "-L%s/3rd-android-4-armeabi-release/lib" % scumm_root_android
scumm_env_android["ANDROID_SDK"] = "%s/android-sdk-linux_x86" % scumm_root_android
scumm_env_android["ANDROID_NDK"] = "%s/android-ndk-r5b" % scumm_root_android

p = {
	"configureargs": [
		"--host=android",
		"--enable-plugins",
		"--default-dynamic",
		"--disable-png"	# sword25 plugin linking fails otherwise
	],
	"env": scumm_env_android,
	"disttarget": "androiddistdebug",
	"package": [ "debug" ]
}

scumm_platforms_master["android"] = p
scumm_platforms_stable["android"] = p

# WebOS
scumm_root_webos = "/opt/toolchains/webos"
scumm_env_webos = copy.deepcopy(scumm_env)
scumm_env_webos["PATH"] = "%s/PalmPDK/arm-gcc/bin:%s" % (scumm_root_webos, DEFAULT_PATH)
scumm_env_webos["CXX"] = "ccache arm-wince-mingw32ce-g++"
scumm_env_webos["WEBOS_SDK"] = "%s/PalmSDK/Current" % scumm_root_webos
scumm_env_webos["WEBOS_PDK"] = "%s/PalmPDK" % scumm_root_webos

p = {
	"configureargs": [
		"--host=webos",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_webos,
	"disttarget": "package",
	"package": [ "portdist" ]
}

scumm_platforms_master["webos"] = p
scumm_platforms_stable["webos"] = p

#######
####### buildbot setup
#######

c = BuildmasterConfig = {}

####### BUILDSLAVES

# The slave buildbots.

from buildbot.buildslave import BuildSlave

# the fetching schedulers count as build too, and since its waiting for
# the compiling builders, we need at least 2 concurrent jobs
c["slaves"] = [ BuildSlave("localslave", scummsecret.pwd_localslave) ]
c["slavePortnum"] = "tcp:9989:interface=127.0.0.1"

####### SCHEDULERS

# Only fetch changes, these checkouts are used by all compile runs.

from buildbot.scheduler import Scheduler, Nightly, Triggerable

s_master = Scheduler(name = "fetch-master",
					branch = scumm_branch_master,
					treeStableTimer = 5,
					builderNames = [ "fetch-master" ])

s_stable = Scheduler(name = "fetch-stable",
					branch = scumm_branch_stable,
					treeStableTimer = 5,
					builderNames = [ "fetch-stable" ])

# The building schedulers, starting the associated builders

builders_master = []
for i in scumm_platforms_master.keys():
	builders_master.append("master-%s" % i)

s_build_master = Triggerable(name = "master", builderNames = builders_master)

builders_stable = []
for i in scumm_platforms_stable.keys():
	builders_stable.append("stable-%s" % i)

s_build_stable = Triggerable(name = "stable", builderNames = builders_stable)

c["schedulers"] = [
	s_master,
	s_stable,
	s_build_master,
	s_build_stable
]

# The nightly schedulers.
if scumm_build_nightly_master:
	c["schedulers"].append(Nightly(name = "nightly_master",
							branch = scumm_branch_master,
							builderNames = [ "nightly-master" ],
							hour = 4,
							minute = 1,
							onlyIfChanged = True))

if scumm_build_nightly_stable:
	c["schedulers"].append(Nightly(name = "nightly_stable",
							branch = scumm_branch_stable,
							builderNames = [ "nightly-stable" ],
							hour = 4,
							minute = 0,
							onlyIfChanged = True))

####### BUILDERS

from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import Git
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import Compile

# One lock to rule them all.
# Used to prevent source updates when the nightly schedulers are busy.
from buildbot.locks import MasterLock, SlaveLock
lock_src = MasterLock("source")
lock_bot = SlaveLock("slave", maxCount = 1)

# The source fetching builders

c["builders"] = []

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode = "update",
				workdir = "src",
				repourl = scumm_giturl,
				branch = scumm_branch_master))
f.addStep(Trigger(schedulerNames = [ "master" ],
					copy_properties = [ 'got_revision' ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-master",
	"slavename": "localslave",
	"builddir": "src-master",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

f = factory.BuildFactory()
f.useProgress = False
f.addStep(Git(mode = "update",
				workdir = "src",
				repourl = scumm_giturl,
				branch = scumm_branch_stable))
f.addStep(Trigger(schedulerNames = [ "stable" ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-stable",
	"slavename": "localslave",
	"builddir": "src-stable",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

# Nightly builders

if scumm_build_nightly_master:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "master"))
	f.addStep(Trigger(schedulerNames = [ "master" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "nightly-master",
		"slavename": "localslave",
		"builddir": "nightly-master",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

if scumm_build_nightly_stable:
	f = factory.BuildFactory()
	f.addStep(scumm.Clean(prefix = "stable"))
	f.addStep(Trigger(schedulerNames = [ "stable" ],
						updateSourceStamp = True,
						waitForFinish = True,
						set_properties = { "package": True }))

	c["builders"].append( {
		"name": "nightly-stable",
		"slavename": "localslave",
		"builddir": "nightly-stable",
		"factory": f,
		"category": "nightly",
		"locks": [ lock_src.access("exclusive") ]
	})

# Dynamic generated builders based on the platforms defined at the top of this file

configure_path = "../../src-master/src/configure"
for name, config in scumm_platforms_master.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	f.addStep(scumm.Configure(command = [
											configure_path,
											"--enable-all-engines",
											"--disable-testbed"
										] + config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j3"
						],
						env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	f.addStep(scumm.Package(disttarget = platform_disttarget,
							srcpath = "../../src-master/src/",
							dstpath = scumm_package_dst_master,
							package = scumm_package_master,
							buildname = name + "-%s" % scumm_branch_master_desc,
							platform_package = config["package"],
							env = config["env"]))

	c["builders"].append( {
		"name": "master-%s" % name,
		"slavename": "localslave",
		"builddir": "master-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "master"
	})

configure_path = "../../src-stable/src/configure"
for name, config in scumm_platforms_stable.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	f.addStep(scumm.Configure(command = [ configure_path ] +
								config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j3"
						],
						env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	f.addStep(scumm.Package(disttarget = platform_disttarget,
							srcpath = "../../src-stable/src/",
							dstpath = scumm_package_dst_stable,
							package = scumm_package_stable,
							buildname = name + "-%s" % scumm_branch_stable_desc,
							platform_package = config["package"],
							env = config["env"]))

	c["builders"].append( {
		"name": "stable-%s" % name,
		"slavename": "localslave",
		"builddir": "stable-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "stable"
	})

####### STATUS TARGETS

c["status"] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth

htfile = '/opt/buildbot/master/scumm_htpasswd'
web_authz = None

if os.path.exists(htfile):
	web_authz = Authz(auth=HTPasswdAuth(htfile),
		forceBuild='auth', # only authenticated users
		forceAllBuilds='auth', # only authenticated users
		stopBuild='auth', # only authenticated users
		stopAllBuilds='auth', # only authenticated users
		cancelPendingBuild='auth', # only authenticated users
	 )

c["status"].append(
		WebStatus(http_port = "tcp:8010:interface=127.0.0.1",
			change_hook_dialects = { 'github' : True },
			order_console_by_time = True,
			authz = web_authz
		)
	)

irc = scumm.IRC("irc.freenode.org", "ScummBot",
				channel = "#scummvm",
				password= scummsecret.pwd_nickserv,
				categories = [ "master", "stable" ],
				stableTimer = 15 * 60)

c["status"].append(irc)

####### PROJECT IDENTITY

c["projectName"] = "ScummVM"
c["projectURL"] = "http://scummvm.org/"
c["buildbotURL"] = "http://buildbot.scummvm.org/"

