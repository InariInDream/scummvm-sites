# -*- python -*-
# ex: set syntax=python:

# TODO: Would be nice to run "make test" -- probably as a separate task

#######
####### ScummVM settings for buildbot
#######

import os, sys, copy
sys.path.append("/var/lib/buildbot/master")
import scumm
import scummsecret

# Toggles a few things, only meant for debugging and local testing.

# fake commits via the shell command:
# trunk: buildbot sendchange --master localhost:9989 --revision_number 48939 --username testuser base/nonexistant.cpp
# branch: buildbot sendchange --master localhost:9989 --branch branches/branch-1-1-0 --revision_number 48939 --username testuser base/nonexistant.cpp

scumm_testenv = False

scumm_svnroot = "https://scummvm.svn.sourceforge.net/svnroot/scummvm/scummvm/"
scumm_revlink = "https://sourceforge.net/apps/trac/scummvm/changeset/%s"

scumm_branch = "branches/branch-1-1-0"
scumm_branch_desc = "1.1.0"

if scumm_testenv:
	scumm_package_dst_trunk = "/tmp"
	scumm_package_dst_branch = "/tmp"
else:
	scumm_package_dst_trunk = "/var/www/snapshots/trunk"
	scumm_package_dst_branch = "/var/www/snapshots/1.1.0"

# Files to package for branch snapshots (common to all ports).
scumm_package_branch = [
	"AUTHORS",
	"COPYING",
	"COPYING.BSD",
	"COPYING.LGPL",
	"COPYRIGHT",
	"NEWS",
	"README",
	"gui/themes/scummmodern.zip",
	"gui/themes/translations.dat",
	"dists/engine-data/drascula.dat",
	"dists/engine-data/hugo.dat",
	"dists/engine-data/kyra.dat",
	"dists/engine-data/lure.dat",
	"dists/engine-data/m4.dat",
	"dists/engine-data/queen.tbl",
	"dists/engine-data/sky.cpt",
	"dists/engine-data/teenagent.dat",
	"dists/pred.dic"
]

# Files to package for trunk snapshots (common to all ports).
scumm_package_trunk = copy.deepcopy(scumm_package_branch)
scumm_package_trunk.append("dists/engine-data/teenagent.dat")

scumm_env = {
	"LC_ALL": "C",
	"CXX": "",
	"CXXFLAGS": "",
	"CPPFLAGS": "",
	"LDFLAGS": ""
}

# Our platform definitions.

scumm_platforms_trunk = {}
scumm_platforms_branch = {}

# debian lenny 32bit.
scumm_env_lenny = copy.deepcopy(scumm_env)
scumm_env_lenny["CXX"] = "ccache g++"

p = {
	"configureargs": [ ],
	"env": scumm_env_lenny,
	"package": [ "scummvm" ]
}

scumm_platforms_trunk["lenny"] = p
scumm_platforms_branch["lenny"] = p

# debian lenny 64bit.
scumm_root_lenny_x86_64 = "/opt/toolchains/debian-lenny-x86_64"
scumm_env_lenny_x86_64 = copy.deepcopy(scumm_env)
scumm_env_lenny_x86_64["PATH"] = "%s/bin:%s" % (scumm_root_lenny_x86_64, os.environ["PATH"])
scumm_env_lenny_x86_64["CXX"] = "ccache g++"
scumm_env_lenny_x86_64["CXXFLAGS"] = "-m64 -isystem %s/usr/include" % scumm_root_lenny_x86_64
scumm_env_lenny_x86_64["LDFLAGS"] = "-m64 -Wl,-rpath,%s/lib -Wl,-rpath,%s/usr/lib -L%s/usr/lib" % \
									(scumm_root_lenny_x86_64, scumm_root_lenny_x86_64, scumm_root_lenny_x86_64)

p = {
	"configureargs": [
		"--host=x86_64-unknown-linux-gnu",
	],
	"env": scumm_env_lenny_x86_64,
	"package": [ "scummvm" ]
}

scumm_platforms_trunk["lenny-x86_64"] = p
scumm_platforms_branch["lenny-x86_64"] = p

# mingw 32bit, using the mingw compiler from the debian repositories.
scumm_root_mingw_w32 = "/opt/toolchains/i586-mingw32msvc"
scumm_env_mingw_w32 = copy.deepcopy(scumm_env)
scumm_env_mingw_w32["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w32, os.environ["PATH"])
scumm_env_mingw_w32["CXX"] = "ccache i586-mingw32msvc-g++"
scumm_env_mingw_w32["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w32
scumm_env_mingw_w32["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w32

p = {
	"configureargs": [
		"--host=i586-mingw32msvc",
	],
	"env": scumm_env_mingw_w32,
	"package": [
		"scummvm.exe",
		"%s/bin/SDL.dll" % scumm_root_mingw_w32
	]
}

scumm_platforms_trunk["mingw-w32"] = p
scumm_platforms_branch["mingw-w32"] = p

# mingw 64bit, using an experimental snapshot of mingw-w64.
scumm_root_mingw_w64 = "/opt/toolchains/mingw-w64-bin_i686-linux"
scumm_env_mingw_w64 = copy.deepcopy(scumm_env)
scumm_env_mingw_w64["PATH"] = "%s/bin:%s" % (scumm_root_mingw_w64, os.environ["PATH"])
scumm_env_mingw_w64["CXX"] = "ccache x86_64-pc-mingw32-g++"
scumm_env_mingw_w64["CXXFLAGS"] = "-isystem %s/include" % scumm_root_mingw_w64
scumm_env_mingw_w64["LDFLAGS"] = "-L%s/lib" % scumm_root_mingw_w64

p = {
	"configureargs": [
		"--host=x86_64-pc-mingw32",
	],
	"env": scumm_env_mingw_w64,
	"package": [
		"scummvm.exe",
		"%s/bin/SDL.dll" % scumm_root_mingw_w64,
		"%s/bin/libgcc_s_sjlj-1.dll" % scumm_root_mingw_w64
	]
}

scumm_platforms_trunk["mingw-w64"] = p
scumm_platforms_branch["mingw-w64"] = p

# wii
scumm_root_wii = "/opt/toolchains/devkitPPC-r16"
scumm_env_wii = copy.deepcopy(scumm_env)
scumm_env_wii["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_wii, os.environ["PATH"])
scumm_env_wii["CXX"] = "ccache powerpc-gekko-g++"
scumm_env_wii["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_wii
scumm_env_wii["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_wii
scumm_env_wii["DEVKITPRO"] = "%s" % scumm_root_wii
scumm_env_wii["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_wii

p = {
	"configureargs": [
		"--host=wii",
		"--enable-vkeybd",
	],
	"env": scumm_env_wii,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ]
}

scumm_platforms_trunk["wii"] = p
# TODO add branch again when 1.2.0 is branched

# gamecube
scumm_root_gc = "/opt/toolchains/devkitPPC-r16"
scumm_env_gc = copy.deepcopy(scumm_env)
scumm_env_gc["PATH"] = "%s/devkitPPC/bin:%s" % (scumm_root_gc, os.environ["PATH"])
scumm_env_gc["CXX"] = "ccache powerpc-gekko-g++"
scumm_env_gc["CXXFLAGS"] = "-isystem %s/3rd/include" % scumm_root_gc
scumm_env_gc["LDFLAGS"] = "-L%s/3rd/lib" % scumm_root_gc
scumm_env_gc["DEVKITPRO"] = "%s" % scumm_root_gc
scumm_env_gc["DEVKITPPC"] = "%s/devkitPPC" % scumm_root_gc

p = {
	"configureargs": [
		"--host=gamecube",
		"--enable-vkeybd",
	],
	"env": scumm_env_gc,
	"disttarget": "wiidist",
	"package": [ "wiidist/scummvm" ]
}

scumm_platforms_trunk["gamecube"] = p
# TODO add branch when 1.2.0 is branched

# Nintendo DS
scumm_root_ds = "/opt/toolchains/devkitARM-r30"
scumm_env_ds = copy.deepcopy(scumm_env)
scumm_env_ds["PATH"] = "%s/devkitARM/bin:%s" % (scumm_root_ds, os.environ["PATH"])
scumm_env_ds["CXX"] = "ccache arm-eabi-c++"
#scumm_env_ds["CXXFLAGS"] = "-isystem %s/include" % scumm_root_ds
#scumm_env_ds["LDFLAGS"] = "-L%s/lib" % scumm_root_ds
scumm_env_ds["DEVKITPRO"] = scumm_root_ds
scumm_env_ds["DEVKITARM"] = "%s/devkitARM" % scumm_root_ds

# FIXME: For now we only enable a single engine; enabling all engines
# causes the final link step to fail due to the binary size exceeding
# the maximal limit.
# To fix this properly, we'd have to enable plugin support.
p = {
	"configureargs": [
		"--host=ds",
		"--disable-all-engines",
		"--enable-lure",
	],
	"env": scumm_env_ds,
	#"strip": "%s/bin/arm-eabi-strip scummvm.elf" % scumm_root_ds,
	"package": [ 
		"scummvm.nds",
		"scummvm.ds.gba"
	]
}

scumm_platforms_trunk["ds"] = p
scumm_platforms_branch["ds"] = p

# Mac OS X Intel
scumm_root_osx_intel = "/opt/toolchains/i686-apple-darwin9-10.4"
scumm_env_osx_intel = copy.deepcopy(scumm_env)
scumm_env_osx_intel["PATH"] = "%s/bin:%s" % (scumm_root_osx_intel, os.environ["PATH"])
scumm_env_osx_intel["CXX"] = "ccache i686-apple-darwin9-g++"
scumm_env_osx_intel["CXXFLAGS"] = "-isystem %s/include" % scumm_root_osx_intel
scumm_env_osx_intel["LDFLAGS"] = "-L%s/lib" % scumm_root_osx_intel

p = {
	"configureargs": [
		"--host=i686-apple-darwin9",
		"--disable-nasm",
		"--with-staticlib-prefix=%s" % scumm_root_osx_intel,
	],
	"env": scumm_env_osx_intel,
	"disttarget": "bundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_trunk["osx_intel"] = p
scumm_platforms_branch["osx_intel"] = p

# Mac OS X PPC
scumm_root_osx_ppc = "/opt/toolchains/powerpc-apple-darwin8-10.2"
scumm_env_osx_ppc = copy.deepcopy(scumm_env)
scumm_env_osx_ppc["PATH"] = "%s/bin:%s" % (scumm_root_osx_ppc, os.environ["PATH"])
scumm_env_osx_ppc["CXX"] = "ccache ppc-apple-darwin8-g++"
scumm_env_osx_ppc["CXXFLAGS"] = "-fabi-version=1 -fno-use-cxa-atexit -isystem %s/include" % scumm_root_osx_ppc
scumm_env_osx_ppc["LDFLAGS"] = "-L%s/lib -static-libgcc -ldl" % scumm_root_osx_ppc
scumm_env_osx_ppc["MACOSX_DEPLOYMENT_TARGET"] = "10.2"

p = {
	"configureargs": [
		"--host=ppc-apple-darwin8",
		"--with-staticlib-prefix=%s" % scumm_root_osx_ppc,
	],
	"env": scumm_env_osx_ppc,
	"disttarget": "bundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_trunk["osx_ppc"] = p
scumm_platforms_branch["osx_ppc"] = p

# iPhone
scumm_root_iphone = "/opt/toolchains/arm-apple-darwin9-llvm-gcc-4.2"
scumm_libdir_iphone = "%s/SDK/usr/local" % scumm_root_iphone
scumm_env_iphone = copy.deepcopy(scumm_env)
scumm_env_iphone["PATH"] = "%s/bin:%s" % (scumm_root_iphone, os.environ["PATH"])
scumm_env_iphone["CXX"] = "ccache arm-apple-darwin9-g++"
scumm_env_iphone["CXXFLAGS"] = "-isystem %s/include" % scumm_libdir_iphone
scumm_env_iphone["LDFLAGS"] = "-F%s/SDK/System/Library/PrivateFrameworks -bind_at_load -L%s/lib" % (scumm_root_iphone, scumm_libdir_iphone)
scumm_env_iphone["LIBDIR"] = scumm_libdir_iphone
scumm_env_iphone["CODESIGN_ALLOCATE"] = "/opt/toolchains/arm-apple-darwin9-llvm-gcc-4.2/bin/arm-apple-darwin9-codesign_allocate"

p = {
	"configureargs": [
		"--host=iphone",
		"--with-staticlib-prefix=%s" % scumm_libdir_iphone,
	],
	"env": scumm_env_iphone,
	"disttarget": "iphonebundle",
	"package": [ "ScummVM.app" ]
}

scumm_platforms_trunk["iphone"] = p
scumm_platforms_branch["iphone"] = p

# PSP
scumm_root_psp = "/opt/toolchains/psp"
scumm_env_psp = copy.deepcopy(scumm_env)
scumm_env_psp["PATH"] = "%s/bin:%s" % (scumm_root_psp, os.environ["PATH"])
scumm_env_psp["CXX"] = "ccache psp-g++"
scumm_env_psp["CXXFLAGS"] = "-isystem %s/include" % scumm_root_psp
scumm_env_psp["LDFLAGS"] = "-L%s/lib" % scumm_root_psp
scumm_env_psp["PSPDEV"] = scumm_root_psp

p = {
	"configureargs": [
		"--host=psp",
		"--disable-debug",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_psp,
	"package": [ 
		"EBOOT.PBP",
		"plugins"
	]
}

p_trunk = copy.deepcopy(p)  # copy for trunk

p["package"].extend( [
	"../../src-branch/src/backends/platform/psp/kbd.zip"
] )
p_trunk["package"].extend( [
	"../../src-trunk/src/backends/platform/psp/kbd.zip"
] )

scumm_platforms_branch["psp"] = p
scumm_platforms_trunk["psp"] = p_trunk

# PS2
scumm_root_ps2 = "/opt/toolchains/ps2"
scumm_env_ps2 = copy.deepcopy(scumm_env)
scumm_env_ps2["PATH"] = "%s/tools/bin:%s/tools/ee/bin:%s/tools/iop/bin:%s/tools/dvp/bin:%s/sdk/bin:%s" % \
						(scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, scumm_root_ps2, os.environ["PATH"])
scumm_env_ps2["CXX"] = "ccache ee-g++"
#scumm_env_ps2["CXXFLAGS"] = "-isystem %s/include" % scumm_root_ps2
#scumm_env_ps2["LDFLAGS"] = "-L%s/lib" % scumm_root_ps2
scumm_env_ps2["PS2DEV"] = "%s/tools" % scumm_root_ps2
scumm_env_ps2["PS2SDK"] = "%s/sdk" % scumm_root_ps2

p = {
	"configureargs": [
		"--host=ps2",
		"--disable-agos2",
		"--disable-groovie",
		"--disable-lol",
		"--disable-m4",
		"--disable-sci",
	],
	"env": scumm_env_ps2,
	"strip": "%s/tools/ee/bin/ee-strip scummvm.elf" % scumm_root_ps2,
	"package": [ "scummvm.elf" ]	# TODO/FIXME: What to package?
}

scumm_platforms_trunk["ps2"] = p
scumm_platforms_branch["ps2"] = p

# GP2X
scumm_root_gp2x = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2x = copy.deepcopy(scumm_env)
scumm_env_gp2x["PATH"] = "%s/bin:%s" % (scumm_root_gp2x, os.environ["PATH"])
scumm_env_gp2x["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2x["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2x
scumm_env_gp2x["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2x

p = {
	"configureargs": [
		"--host=gp2x",
		"--enable-vkeybd"
	],
	"env": scumm_env_gp2x,
	"disttarget": "gp2x-bundle",
	"package": [ "release/scummvm-gp2x.tar.bz2" ]
}

scumm_platforms_trunk["gp2x"] = p
# TODO add branch when 1.2.0 is branched (bundle target is new post 1.1.0)

# GP2X Wiz
scumm_root_gp2xwiz = "/opt/toolchains/open2x-gcc-4.1.1"
scumm_env_gp2xwiz = copy.deepcopy(scumm_env)
scumm_env_gp2xwiz["PATH"] = "%s/bin:%s" % (scumm_root_gp2xwiz, os.environ["PATH"])
scumm_env_gp2xwiz["CXX"] = "ccache arm-open2x-linux-g++"
scumm_env_gp2xwiz["CXXFLAGS"] = "-isystem %s/include" % scumm_root_gp2xwiz
scumm_env_gp2xwiz["LDFLAGS"] = "-L%s/lib" % scumm_root_gp2xwiz

p = {
	"configureargs": [
		"--host=gp2xwiz",
		"--enable-vkeybd",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_gp2xwiz,
	"disttarget": "gp2xwiz-bundle",
	"package": [ "release/scummvm-gp2xwiz.tar.bz2" ]	
}

scumm_platforms_trunk["gp2xwiz"] = p
# TODO add branch when 1.2.0 is branched

# DC
scumm_root_dc= "/opt/toolchains/dc"
scumm_env_dc = copy.deepcopy(scumm_env)
scumm_env_dc["PATH"] = "%s/bin:%s" % (scumm_root_dc, os.environ["PATH"])
scumm_env_dc["CXX"] = "ccache sh-elf-g++"
scumm_env_dc["CXXFLAGS"] = "-isystem %s/include" % scumm_root_dc
scumm_env_dc["LDFLAGS"] = "-L%s/lib" % scumm_root_dc
scumm_env_dc["IP_TEMPLATE_FILE"] = "/opt/extras-dc/IP.TMPL"
scumm_env_dc["DC_IMAGE_EXTRA_DIR"] = "/opt/extras-dc/demos"

p = {
	"configureargs": [
		"--host=dreamcast",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_dc,
	"disttarget": "dist",
	"package": [
		"scummvm.elf",
		"SCUMMVM.BIN",
		"AGI.PLG",
		"AGOS.PLG",
		"CINE.PLG",
		"CRUISE.PLG",
		"DRASCULA.PLG",
		"GOB.PLG",
		"GROOVIE.PLG",
		"KYRA.PLG",
		"LURE.PLG",
		"MADE.PLG",
		"PARALLACTION.PLG",
		"QUEEN.PLG",
		"SAGA.PLG",
		"SCUMM.PLG",
		"SKY.PLG",
		"SWORD1.PLG",
		"SWORD2.PLG",
		"TINSEL.PLG",
		"TOUCHE.PLG",
		"TUCKER.PLG "
	]
}

scumm_platforms_branch["dc"] = p

p_trunk = copy.deepcopy(p)
p_trunk["package"].extend( [
	"DRACI.PLG",
	"M4.PLG",
	"SCI.PLG",
	"TEENAGENT.PLG"
] )

scumm_platforms_trunk["dc"] = p_trunk

# windows ce
scumm_root_wince = "/opt/toolchains/mingw32ce-0.5.1"
scumm_env_wince = copy.deepcopy(scumm_env)
scumm_env_wince["PATH"] = "%s/bin:%s" % (scumm_root_wince, os.environ["PATH"])
scumm_env_wince["CXX"] = "ccache arm-wince-mingw32ce-g++"
scumm_env_wince["CXXFLAGS"] = "-isystem %s/include -I%s/include/SDL -I%s/include/tremolo" % (scumm_root_wince, scumm_root_wince, scumm_root_wince)
scumm_env_wince["LDFLAGS"] = "-L%s/lib" % scumm_root_wince

p = {
	"configureargs": [
		"--host=wince"
	],
	"env": scumm_env_wince,
	"strip": "%s/bin/arm-wince-mingw32ce-strip scummvm.exe" % scumm_root_wince,
	"package": [ "scummvm.exe" ]
}

scumm_platforms_trunk["wince"] = p
scumm_platforms_branch["wince"] = p

# motoezx 
scumm_root_motoezx = "/opt/toolchains/motoezx"
scumm_env_motoezx = copy.deepcopy(scumm_env)
scumm_env_motoezx["PATH"] = "%s/bin:%s/crosstool/bin:%s" % (scumm_root_motoezx, scumm_root_motoezx, os.environ["PATH"])
scumm_env_motoezx["CXX"] = "ccache arm-linux-gnu-g++"
scumm_env_motoezx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motoezx)
scumm_env_motoezx["LDFLAGS"] = "-L%s/lib" % scumm_root_motoezx

p = {
	"configureargs": [
		"--host=motoezx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motoezx,
	"disttarget": "motoezx",
	"package": [ "release/ScummVM-motoezx.pkg" ]
}

scumm_platforms_trunk["motoezx"] = p
scumm_platforms_branch["motoezx"] = p

# motomagx
scumm_root_motomagx = "/opt/toolchains/motomagx/arm-eabi2"
scumm_env_motomagx = copy.deepcopy(scumm_env)
scumm_env_motomagx["PATH"] = "%s/bin:%s" % (scumm_root_motomagx, os.environ["PATH"])
scumm_env_motomagx["CXX"] = "ccache arm-linux-gnueabi-g++"
scumm_env_motomagx["CXXFLAGS"] = "-isystem %s/include" % (scumm_root_motomagx)
scumm_env_motomagx["LDFLAGS"] = "-L%s/lib" % scumm_root_motomagx

p = {
	"configureargs": [
		"--host=motomagx",
		"--enable-vkeybd"
	],
	"env": scumm_env_motomagx,
	"disttarget": "motomagx-mpkg",
	"package": [ "release/ScummVM-motomagx.mpkg" ]
}

scumm_platforms_trunk["motomagx"] = p
scumm_platforms_branch["motomagx"] = p

# n64
scumm_root_n64 = "/opt/toolchains/mips64-n64"
scumm_env_n64 = copy.deepcopy(scumm_env)
scumm_env_n64["PATH"] = "%s/bin:%s" % (scumm_root_n64, os.environ["PATH"])
scumm_env_n64["CXX"] = "ccache mips64-g++"
scumm_env_n64["N64SDK"] = "/opt/toolchains/mips64-n64"

p = {
	"configureargs": [
		"--host=n64",
		"--disable-all-engines",
		"--enable-scumm",
		"--enable-gob",
		"--enable-vkeybd"
	],
	"env": scumm_env_n64,
	"strip": "%s/bin/mips64-strip scummvm.elf" % scumm_root_n64,
	"package": [ "scummvm.elf" ]
}

scumm_platforms_trunk["n64"] = p

# dingux
scumm_root_dingux = "/opt/toolchains/dingux-mipsel"
scumm_env_dingux = copy.deepcopy(scumm_env)
scumm_env_dingux["PATH"] = "%s/usr/bin:%s" % (scumm_root_dingux, os.environ["PATH"])
scumm_env_dingux["CXX"] = "ccache mipsel-linux-g++"

p = {
	"configureargs": [
		"--host=dingux",
		"--enable-plugins",
		"--default-dynamic"
	],
	"env": scumm_env_dingux,
	"package": [
		"scummvm",
		"plugins"
	]
}

scumm_platforms_trunk["dingux"] = p

#######
####### buildbot setup
#######

c = BuildmasterConfig = {}

####### BUILDSLAVES

# The slave buildbots.

from buildbot.buildslave import BuildSlave

# the fetching schedulers count as build too, and since its waiting for
# the compiling builders, we need at least 2 concurrent jobs
c["slaves"] = [ BuildSlave("localslave", scummsecret.pwd_localslave) ]
c["slavePortnum"] = "tcp:9989:interface=127.0.0.1"

####### CHANGESOURCES

# Poll for new revisions in SVN.
# Trunk and one branch are taken into account.

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
from buildbot.changes.pb import PBChangeSource

if scumm_testenv:
	c["change_source"] = PBChangeSource()
else:
	c["change_source"] = SVNPoller(scumm_svnroot,
									split_file = split_file_branches,
									pollinterval = 3 * 60,
									revlinktmpl = scumm_revlink)

####### SCHEDULERS

# Only fetch changes from SVN, these checkouts are used by all compile runs.

from buildbot.scheduler import Scheduler, Nightly, Triggerable

s_trunk = Scheduler(name = "fetch-trunk",
					branch = None,
					treeStableTimer = 5,
					builderNames = [ "fetch-trunk" ])

s_branch = Scheduler(name = "fetch-branch",
					branch = scumm_branch,
					treeStableTimer = 5,
					builderNames = [ "fetch-branch" ])

# The building schedulers, starting the associated builders

builders_trunk = []
for i in scumm_platforms_trunk.keys():
	builders_trunk.append("trunk-%s" % i)

s_build_trunk = Triggerable(name = "trunk", builderNames = builders_trunk)

builders_branch = []
for i in scumm_platforms_branch.keys():
	builders_branch.append("branch-%s" % i)

s_build_branch = Triggerable(name = "branch", builderNames = builders_branch)

# The nightly schedulers.
s_nightly_trunk = Nightly(name = "nightly_trunk",
							branch = None,
							builderNames = [ "nightly-trunk" ],
							hour = 4,
							minute = 0,
							onlyIfChanged = True)

s_nightly_branch = Nightly(name = "nightly_branch",
							branch = scumm_branch,
							builderNames = [ "nightly-branch" ],
							hour = 5,
							minute = 0,
							onlyIfChanged = True)

c["schedulers"] = [
	s_trunk,
	s_branch,
	s_build_trunk,
	s_build_branch,
	s_nightly_trunk,
	s_nightly_branch,
]

####### BUILDERS

from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.source import SVN
from buildbot.steps.trigger import Trigger
from buildbot.steps.shell import Compile

# One lock to rule them all.
# Used to prevent SVN updates when the nightly schedulers are busy.
from buildbot.locks import MasterLock, SlaveLock
lock_src = MasterLock("source")
lock_bot = SlaveLock("slave", maxCount = 1)

# The SVN fetching builders

c["builders"] = []

f = factory.BuildFactory()
f.useProgress = False
f.addStep(SVN(mode = "update",
				workdir = "src",
				baseURL = scumm_svnroot,
				defaultBranch = "trunk"))
f.addStep(Trigger(schedulerNames = [ "trunk" ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-trunk",
	"slavename": "localslave",
	"builddir": "src-trunk",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

f = factory.BuildFactory()
f.useProgress = False
f.addStep(SVN(mode = "update",
				workdir = "src",
				baseURL = scumm_svnroot,
				defaultBranch = scumm_branch))
f.addStep(Trigger(schedulerNames = [ "branch" ],
					updateSourceStamp = True,
					waitForFinish = True))

c["builders"].append( {
	"name": "fetch-branch",
	"slavename": "localslave",
	"builddir": "src-branch",
	"factory": f,
	"category": "fetch",
	"locks": [ lock_src.access("exclusive") ]
})

# Nightly builders

f = factory.BuildFactory()
f.addStep(scumm.Clean(prefix = "trunk"))
f.addStep(Trigger(schedulerNames = [ "trunk" ],
					updateSourceStamp = True,
					waitForFinish = True,
					set_properties = { "package": True }))

c["builders"].append( {
	"name": "nightly-trunk",
	"slavename": "localslave",
	"builddir": "nightly-trunk",
	"factory": f,
	"category": "nightly",
	"locks": [ lock_src.access("exclusive") ]
})

f = factory.BuildFactory()
f.addStep(scumm.Clean(prefix = "branch"))
f.addStep(Trigger(schedulerNames = [ "branch" ],
					updateSourceStamp = True,
					waitForFinish = True,
					set_properties = { "package": True }))

c["builders"].append( {
	"name": "nightly-branch",
	"slavename": "localslave",
	"builddir": "nightly-branch",
	"factory": f,
	"category": "nightly",
	"locks": [ lock_src.access("exclusive") ]
})

# Dynamic generated builders based on the platforms defined at the top of this file

configure_path = "../../src-trunk/src/configure"
for name, config in scumm_platforms_trunk.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	f.addStep(scumm.Configure(command = [ configure_path, "--enable-all-engines" ] +
								config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j2",
							WithProperties("VER_SVNREV=%(revision)s")
						],
						env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	f.addStep(scumm.Package(disttarget = platform_disttarget,
							srcpath = "../../src-trunk/src/",
							dstpath = scumm_package_dst_trunk,
							package = scumm_package_trunk,
							buildname = name + "-trunk",
							platform_package = config["package"],
							env = config["env"]))

	c["builders"].append( {
		"name": "trunk-%s" % name,
		"slavename": "localslave",
		"builddir": "trunk-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "trunk"
	})

configure_path = "../../src-branch/src/configure"
for name, config in scumm_platforms_branch.items():
	f = factory.BuildFactory()
	f.useProgress = False

	f.addStep(scumm.Prepare(configure = configure_path))

	f.addStep(scumm.Configure(command = [ configure_path ] +
								config["configureargs"],
								env = config["env"]))

	f.addStep(Compile(command = [
							"make",
							"-j2",
							WithProperties("VER_SVNREV=%(revision)s")
						],
						env = config["env"]))

	platform_disttarget = ""
	if config.has_key("disttarget"):
		platform_disttarget = config["disttarget"]
	else:
		if config.has_key("strip"):
			f.addStep(scumm.Strip(command = config["strip"]))

	f.addStep(scumm.Package(disttarget = platform_disttarget,
							srcpath = "../../src-branch/src/",
							dstpath = scumm_package_dst_branch,
							package = scumm_package_branch,
							buildname = name + "-%s" % scumm_branch_desc,
							platform_package = config["package"],
							env = config["env"]))

	c["builders"].append( {
		"name": "branch-%s" % name,
		"slavename": "localslave",
		"builddir": "branch-%s" % name,
		"factory": f,
		"locks": [ lock_bot.access('counting') ],
		"category": "branch"
	})

####### STATUS TARGETS

c["status"] = []

from buildbot.status.html import WebStatus
from buildbot.status.web.auth import HTPasswdAuth

htfile = '/var/lib/buildbot/master/scumm_htpasswd'
web_auth = None
web_force = False

if scumm_testenv:
	web_force = True

if os.path.exists(htfile):
	web_auth = HTPasswdAuth(htfile)
	web_force = True

c["status"].append(
		WebStatus(http_port = "tcp:8010:interface=127.0.0.1",
			allowForce = web_force,
			auth = web_auth
		)
	)

if scumm_testenv:
	irc = scumm.IRC("irc.freenode.org", "svmbb",
					channel = "#scummbbtest",
					categories = [ "trunk", "branch" ],
					stableTimer = 15 * 60)
else:
	irc = scumm.IRC("irc.freenode.org", "ScummBot",
					channel = "#scummvm",
					password= scummsecret.pwd_nickserv,
					categories = [ "trunk", "branch" ],
					stableTimer = 15 * 60)

c["status"].append(irc)

####### PROJECT IDENTITY

c["projectName"] = "ScummVM"
c["projectURL"] = "http://scummvm.org/"
if scumm_testenv:
	c["buildbotURL"] = "http://localhost:8010/"
else:
	c["buildbotURL"] = "http://buildbot.scummvm.org/buildbot/"

